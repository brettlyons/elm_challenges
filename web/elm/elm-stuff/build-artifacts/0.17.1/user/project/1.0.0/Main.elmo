var _user$project$Main$init = {
	ctor: '_Tuple2',
	_0: {
		circles: _elm_lang$core$Native_List.fromArray(
			[]),
		paused: false,
		keypressed: 0
	},
	_1: _elm_lang$core$Platform_Cmd$none
};
var _user$project$Main$Model = F3(
	function (a, b, c) {
		return {circles: a, keypressed: b, paused: c};
	});
var _user$project$Main$ButtonPress = function (a) {
	return {ctor: 'ButtonPress', _0: a};
};
var _user$project$Main$view = function (model) {
	var pauseText = model.paused ? 'Unpause' : 'Pause';
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(
						A2(
							_elm_lang$core$Basics_ops['++'],
							'Paused: ',
							_elm_lang$core$Basics$toString(model.paused)))
					])),
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('row')
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$button,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$class('btn btn-lg btn-info'),
								_elm_lang$html$Html_Events$onClick(
								_user$project$Main$ButtonPress(112))
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text(pauseText)
							])),
						A2(
						_elm_lang$html$Html$button,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$class('btn btn-lg btn-danger pull-right'),
								_elm_lang$html$Html_Events$onClick(
								_user$project$Main$ButtonPress(114))
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text('Clear field and restart')
							]))
					]))
			]));
};
var _user$project$Main$Tick = function (a) {
	return {ctor: 'Tick', _0: a};
};
var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		_elm_lang$core$Native_List.fromArray(
			[
				A2(_elm_lang$core$Time$every, _elm_lang$core$Time$second, _user$project$Main$Tick),
				_elm_lang$keyboard$Keyboard$presses(_user$project$Main$ButtonPress)
			]));
};
var _user$project$Main$NewCircle = function (a) {
	return {ctor: 'NewCircle', _0: a};
};
var _user$project$Main$getRandomPos = F3(
	function (min, maxWidth, maxHeight) {
		return A2(
			_elm_lang$core$Random$generate,
			_user$project$Main$NewCircle,
			A2(
				_elm_lang$core$Random$pair,
				A2(_elm_lang$core$Random$int, min, maxWidth),
				A2(_elm_lang$core$Random$int, min, maxHeight)));
	});
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'NewCircle':
				return model.paused ? {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none} : {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							circles: A2(_elm_lang$core$List_ops['::'], _p0._0, model.circles)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Tick':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: A3(_user$project$Main$getRandomPos, 10, 380, 380)
				};
			default:
				var _p1 = _p0._0;
				var togglePause = _elm_lang$core$Native_Utils.eq(_p1, 112) ? _elm_lang$core$Basics$not(model.paused) : model.paused;
				return _elm_lang$core$Native_Utils.eq(_p1, 114) ? {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							circles: _elm_lang$core$Native_List.fromArray(
								[])
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				} : {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{paused: togglePause}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
var _user$project$Main$main = {
	main: _elm_lang$html$Html_App$program(
		{init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})
};
